// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: DataManager.proto

package criticalmanufacturing_grpc_datasource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataManagerServices_ListDatasets_FullMethodName         = "/Cmf.DataManager.DataManagerServices/ListDatasets"
	DataManagerServices_ListMetrics_FullMethodName          = "/Cmf.DataManager.DataManagerServices/ListMetrics"
	DataManagerServices_ListDimensionKeys_FullMethodName    = "/Cmf.DataManager.DataManagerServices/ListDimensionKeys"
	DataManagerServices_ListDimensionValues_FullMethodName  = "/Cmf.DataManager.DataManagerServices/ListDimensionValues"
	DataManagerServices_ListDimensionsValues_FullMethodName = "/Cmf.DataManager.DataManagerServices/ListDimensionsValues"
	DataManagerServices_GetMetricHistory_FullMethodName     = "/Cmf.DataManager.DataManagerServices/GetMetricHistory"
	DataManagerServices_GetMetricValue_FullMethodName       = "/Cmf.DataManager.DataManagerServices/GetMetricValue"
	DataManagerServices_GetMetricAggregate_FullMethodName   = "/Cmf.DataManager.DataManagerServices/GetMetricAggregate"
	DataManagerServices_GetMetricTable_FullMethodName       = "/Cmf.DataManager.DataManagerServices/GetMetricTable"
)

// DataManagerServicesClient is the client API for DataManagerServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataManagerServicesClient interface {
	// Returns all datasets from the system
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	// Returns a list of all available metrics
	ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error)
	// Returns a list of all available dimension keys
	ListDimensionKeys(ctx context.Context, in *ListDimensionKeysRequest, opts ...grpc.CallOption) (*ListDimensionKeysResponse, error)
	// Returns a list of all dimension values for a single dimension key (For Grafana)
	ListDimensionValues(ctx context.Context, in *ListDimensionValuesRequest, opts ...grpc.CallOption) (*ListDimensionValuesResponse, error)
	// Returns a list of all dimension values for multiple dimension keys (For MES)
	ListDimensionsValues(ctx context.Context, in *ListDimensionsValuesRequest, opts ...grpc.CallOption) (*ListDimensionsValuesResponse, error)
	// Gets the history for one or more metrics
	GetMetricHistory(ctx context.Context, in *GetMetricHistoryRequest, opts ...grpc.CallOption) (*GetMetricHistoryResponse, error)
	// Gets the last known value for one or more metrics
	GetMetricValue(ctx context.Context, in *GetMetricValueRequest, opts ...grpc.CallOption) (*GetMetricValueResponse, error)
	// Gets an aggregation for one or more metrics
	GetMetricAggregate(ctx context.Context, in *GetMetricAggregateRequest, opts ...grpc.CallOption) (*GetMetricAggregateResponse, error)
	// Gets the table for one or more metrics
	GetMetricTable(ctx context.Context, in *GetMetricTableRequest, opts ...grpc.CallOption) (*GetMetricTableResponse, error)
}

type dataManagerServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDataManagerServicesClient(cc grpc.ClientConnInterface) DataManagerServicesClient {
	return &dataManagerServicesClient{cc}
}

func (c *dataManagerServicesClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_ListDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error) {
	out := new(ListMetricsResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_ListMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) ListDimensionKeys(ctx context.Context, in *ListDimensionKeysRequest, opts ...grpc.CallOption) (*ListDimensionKeysResponse, error) {
	out := new(ListDimensionKeysResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_ListDimensionKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) ListDimensionValues(ctx context.Context, in *ListDimensionValuesRequest, opts ...grpc.CallOption) (*ListDimensionValuesResponse, error) {
	out := new(ListDimensionValuesResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_ListDimensionValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) ListDimensionsValues(ctx context.Context, in *ListDimensionsValuesRequest, opts ...grpc.CallOption) (*ListDimensionsValuesResponse, error) {
	out := new(ListDimensionsValuesResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_ListDimensionsValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) GetMetricHistory(ctx context.Context, in *GetMetricHistoryRequest, opts ...grpc.CallOption) (*GetMetricHistoryResponse, error) {
	out := new(GetMetricHistoryResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_GetMetricHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) GetMetricValue(ctx context.Context, in *GetMetricValueRequest, opts ...grpc.CallOption) (*GetMetricValueResponse, error) {
	out := new(GetMetricValueResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_GetMetricValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) GetMetricAggregate(ctx context.Context, in *GetMetricAggregateRequest, opts ...grpc.CallOption) (*GetMetricAggregateResponse, error) {
	out := new(GetMetricAggregateResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_GetMetricAggregate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerServicesClient) GetMetricTable(ctx context.Context, in *GetMetricTableRequest, opts ...grpc.CallOption) (*GetMetricTableResponse, error) {
	out := new(GetMetricTableResponse)
	err := c.cc.Invoke(ctx, DataManagerServices_GetMetricTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManagerServicesServer is the server API for DataManagerServices service.
// All implementations must embed UnimplementedDataManagerServicesServer
// for forward compatibility
type DataManagerServicesServer interface {
	// Returns all datasets from the system
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	// Returns a list of all available metrics
	ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error)
	// Returns a list of all available dimension keys
	ListDimensionKeys(context.Context, *ListDimensionKeysRequest) (*ListDimensionKeysResponse, error)
	// Returns a list of all dimension values for a single dimension key (For Grafana)
	ListDimensionValues(context.Context, *ListDimensionValuesRequest) (*ListDimensionValuesResponse, error)
	// Returns a list of all dimension values for multiple dimension keys (For MES)
	ListDimensionsValues(context.Context, *ListDimensionsValuesRequest) (*ListDimensionsValuesResponse, error)
	// Gets the history for one or more metrics
	GetMetricHistory(context.Context, *GetMetricHistoryRequest) (*GetMetricHistoryResponse, error)
	// Gets the last known value for one or more metrics
	GetMetricValue(context.Context, *GetMetricValueRequest) (*GetMetricValueResponse, error)
	// Gets an aggregation for one or more metrics
	GetMetricAggregate(context.Context, *GetMetricAggregateRequest) (*GetMetricAggregateResponse, error)
	// Gets the table for one or more metrics
	GetMetricTable(context.Context, *GetMetricTableRequest) (*GetMetricTableResponse, error)
	mustEmbedUnimplementedDataManagerServicesServer()
}

// UnimplementedDataManagerServicesServer must be embedded to have forward compatible implementations.
type UnimplementedDataManagerServicesServer struct {
}

func (UnimplementedDataManagerServicesServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedDataManagerServicesServer) ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (UnimplementedDataManagerServicesServer) ListDimensionKeys(context.Context, *ListDimensionKeysRequest) (*ListDimensionKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDimensionKeys not implemented")
}
func (UnimplementedDataManagerServicesServer) ListDimensionValues(context.Context, *ListDimensionValuesRequest) (*ListDimensionValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDimensionValues not implemented")
}
func (UnimplementedDataManagerServicesServer) ListDimensionsValues(context.Context, *ListDimensionsValuesRequest) (*ListDimensionsValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDimensionsValues not implemented")
}
func (UnimplementedDataManagerServicesServer) GetMetricHistory(context.Context, *GetMetricHistoryRequest) (*GetMetricHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricHistory not implemented")
}
func (UnimplementedDataManagerServicesServer) GetMetricValue(context.Context, *GetMetricValueRequest) (*GetMetricValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricValue not implemented")
}
func (UnimplementedDataManagerServicesServer) GetMetricAggregate(context.Context, *GetMetricAggregateRequest) (*GetMetricAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricAggregate not implemented")
}
func (UnimplementedDataManagerServicesServer) GetMetricTable(context.Context, *GetMetricTableRequest) (*GetMetricTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricTable not implemented")
}
func (UnimplementedDataManagerServicesServer) mustEmbedUnimplementedDataManagerServicesServer() {}

// UnsafeDataManagerServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataManagerServicesServer will
// result in compilation errors.
type UnsafeDataManagerServicesServer interface {
	mustEmbedUnimplementedDataManagerServicesServer()
}

func RegisterDataManagerServicesServer(s grpc.ServiceRegistrar, srv DataManagerServicesServer) {
	s.RegisterService(&DataManagerServices_ServiceDesc, srv)
}

func _DataManagerServices_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_ListMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).ListMetrics(ctx, req.(*ListMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_ListDimensionKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDimensionKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).ListDimensionKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_ListDimensionKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).ListDimensionKeys(ctx, req.(*ListDimensionKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_ListDimensionValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDimensionValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).ListDimensionValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_ListDimensionValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).ListDimensionValues(ctx, req.(*ListDimensionValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_ListDimensionsValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDimensionsValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).ListDimensionsValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_ListDimensionsValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).ListDimensionsValues(ctx, req.(*ListDimensionsValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_GetMetricHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).GetMetricHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_GetMetricHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).GetMetricHistory(ctx, req.(*GetMetricHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_GetMetricValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).GetMetricValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_GetMetricValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).GetMetricValue(ctx, req.(*GetMetricValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_GetMetricAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).GetMetricAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_GetMetricAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).GetMetricAggregate(ctx, req.(*GetMetricAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagerServices_GetMetricTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServicesServer).GetMetricTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagerServices_GetMetricTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServicesServer).GetMetricTable(ctx, req.(*GetMetricTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataManagerServices_ServiceDesc is the grpc.ServiceDesc for DataManagerServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataManagerServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cmf.DataManager.DataManagerServices",
	HandlerType: (*DataManagerServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatasets",
			Handler:    _DataManagerServices_ListDatasets_Handler,
		},
		{
			MethodName: "ListMetrics",
			Handler:    _DataManagerServices_ListMetrics_Handler,
		},
		{
			MethodName: "ListDimensionKeys",
			Handler:    _DataManagerServices_ListDimensionKeys_Handler,
		},
		{
			MethodName: "ListDimensionValues",
			Handler:    _DataManagerServices_ListDimensionValues_Handler,
		},
		{
			MethodName: "ListDimensionsValues",
			Handler:    _DataManagerServices_ListDimensionsValues_Handler,
		},
		{
			MethodName: "GetMetricHistory",
			Handler:    _DataManagerServices_GetMetricHistory_Handler,
		},
		{
			MethodName: "GetMetricValue",
			Handler:    _DataManagerServices_GetMetricValue_Handler,
		},
		{
			MethodName: "GetMetricAggregate",
			Handler:    _DataManagerServices_GetMetricAggregate_Handler,
		},
		{
			MethodName: "GetMetricTable",
			Handler:    _DataManagerServices_GetMetricTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DataManager.proto",
}
